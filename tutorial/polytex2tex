# This is very similar to Hinze and Loh's lhs2tex program, but probably
# simpler and works for arbitrary languages.
#
# You need to include Andres Loh's polytable.sty from lhs2tex in your 
# source file for this filter to work (and you will probably also need
# lazylist.sty too, also available in the lhs2tex distribution.)
#
# %subst LHS RHS
# 	Substitutes patterns matching LHS with RHS in code blocks and
# 	code snippets.
# 	LHS can be any Awk regular expression.
# 	RHS can include `&' to include the matched pattern.
# 	Substitutions are applied in the order in which they
# 	appear, although redefining a substitution preserves
# 	its place in the substitution order.
#
# %wrapper RHS
# 	A substitution applied last of all to all code blocks and snippets.
# 	Equivalent to having `%subst .* RHS' as your last substitution, so
# 	if used the RHS should obviously include an `&'.
#
# %startcode
# ...
# %endcode
# 	Delimit a code block.
#       The text is put in a verbatim environment.
#
# %include filename
# 	Process the contents of the given file as though they were
# 	literally present at this point in the source file.
#
# #...#
# 	A code snippet that can appear anywhere outside a code block.
#       The code snippet will be surrounded by `\verb?' and `?'.  This
#       means that you may not use `?' in inline code snippets.


BEGIN {
	n_substs     = 0
	wrapper      = ""
	new_column   = 0
	before_start = ""
	after_end    = ""
}

{
	process_line()
	next
}

function process_line() {

	if($1 == "%include") {

		process_file($2)

	} else if($1 == "%beforestart") {

	#	if(before_start != "") {
			before_start = fields_from(2)"\n"before_start
	#	} else {
	#		before_start = fields_from(2)
	#	}

	} else if($1 == "%afterend") {

	#	if(after_end != "") {
			after_end = after_end"\n"fields_from(2)
	#	} else {
	#		after_end = fields_from(2)
	#	}

	} else if($1 == "%wrapper") {

		wrapper = fields_from(2)

	} else if($1 == "%subst") {

		from = $2
		to   = fields_from(3)

		if(from in subst_lhs) {
			subst_to[subst_lhs[from]] = to
		} else {
			subst_lhs[from]      = n_substs
			subst_from[n_substs] = from
			subst_to[n_substs]   = to
			n_substs++
		}

	} else if($1 == "%startcode") {
                print "\\begin{verbatim}"
		in_code = 1

	} else if(in_code && $1 == "%endcode") {
                print "\\end{verbatim}"
		in_code = 0

	} else if(in_code) {
                print $0

	} else {

		# Otherwise we're outside a code block, but anything
		# appearing between #...# should be put in a \verb environment.
		#
		while(match($0, /#[^#]*#/)) {
			pre  = substr($0, 1, RSTART - 1)
			post = substr($0, RSTART + RLENGTH)
			text = substr($0, RSTART+1, RLENGTH-2)
			$0   = pre "\\verb?" text "?" post
		}

		print $0
	}
}

function process_file(filename) {
	while(getline < filename) {
		process_line()
	}
}

function fields_from(i,  text) {

	text = $i

	for(i++; i <= NF; i++) {
		text = $text" "$i
	}

	return text
}

function column_name(col,  name) {

	name = "col"col

	new_column = !(name in columns)

	columns[name]

	return name
}

function apply_substs(text,  i, pre, post) {

	for(i = 0; i < n_substs; i++) {
		text = apply_subst(subst_from[i], subst_to[i], text)
	}

	sub(/^ */, "", text)
	sub(/ *$/, "", text)

	if(wrapper != "") {
		sub(/.*/, wrapper, text)
	}

	return text
}

function apply_subst(lhs, rhs, text,  a, string, i, result) {

	result = ""

	while(match(text, lhs, a)) {

		result     = result substr(text, 1, RSTART - 1)
		string     = rhs
		text       = substr(text, RSTART + RLENGTH)
		gsub(/&/, a[0], string)
		for(i = 1; i in a; i++) {
			gsub("\\\\"i, a[i], string)
		}
		result     = result string
	}
	result = result text

	return result
}
